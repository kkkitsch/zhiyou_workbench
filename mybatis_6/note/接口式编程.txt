
			
	使用老版本的方式进行查询：
	SqlSession session = sqlSessionFactory.openSession();
	try {
	  Blog blog = (Blog) session.selectOne("org.mybatis.example.BlogMapper.selectBlog", 101);
	} finally {
	  session.close();
	}
	
	诚然这种方式能够正常工作，并且对于使用旧版本 MyBatis 的用户来说也比较熟悉，不过现在有了一种更直白的方式。
	
	
	例如，接口式编程：
	
	SqlSession session = sqlSessionFactory.openSession();
	try {
	  BlogMapper mapper = session.getMapper(BlogMapper.class);
	  Blog blog = mapper.selectBlog(101);
	} finally {
	  session.close();
	}
				
	接口式编程的优点：使用对于给定语句能够合理描述参数和返回值的接口（比如说BlogMapper.class），你现在不但可以执行更清晰
	和类型安全的代码，而且还不用担心易错的字符串字面值以及强制类型转换。
	
	在使用接口式编程时，当进行到：BlogMapper mapper = session.getMapper(BlogMapper.class);
	mybatis会为BlogMapper这个接口生成一个代理对象（BlogMapper接口是自己定义的，没有实现类），代理对象
	将接口和xml配置文件进行绑定
	
	生成的代理类对象：
	logger.info("接口式编程：" + mapper.getClass());
	输出为：class com.sun.proxy.$Proxy5 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	