	
	
	自动装配：
		byType：按照类型 进行装配，缺点是如果 IoC容器当中有 多个类型的bean的时候，会出现异常
		byName:要求bean的属性名称必须与配置 文件中引用的bean的id保持一致
		
		自动装配 的缺点：
		在Bean配置文件里设置 autowire属性进行自动装配将会装配Bean的所有属性，然而，若只希望装配个别属性 时，
		autowire属性就不够灵活了，autowire属性要么根据类型自动装配，要么根据名称自动 装配，不能两者兼而有之，
		一般情况下，在实际的项目中，很少用到自动装配功能，因为和自动装配功能带来的好处比起来，明确清晰的配置文档 更有说服力
			   
			   
			   
	使用外部属性文件：
		在配置文件里配置bean时，有事需要在bean的配置里混入系统部署的细节（例如：文件路径，数据源配置信息等）
		而这些部署细节实际上需要和bean配置相分离
		
		需要使用context命名空间
		
		例子：
		<context:property-placeholder location="person.properties" />
		
		<bean id="person_03" class="com.spring.beans.Person" p:name="${personName}"
			p:age="${personAge}"></bean>
			
			
			
	SpringEL表达式：
		通过bean的id对bean进行引用（相当于ref属性，ref标签）
			例子：<property name="cars" value="#{listCar}"></property>
			
		调用方法以及对象中的属性
			-->访问引用对象中的属性
				例子：<property name="cars" value="#{person_05.cars}"></property>
			-->访问方法
				例子：<property name="name" value="#{person_05.name.toUpperCase()}"></property>
				
		计算表达式的值：算数运算、关系运算、逻辑运算
			例子：<util:list id="listInfo">
					<value>#{person_05.age +10>21?true:false}
					</value>
				</util:list>
				<value>#{'这是SpringEL表达式赋的值'}</value>
				<value>#{T(java.lang.Math).PI * 80 * 2}</value>
			
		正则表达式的匹配
			例子：<value> #{person_05.age matches
				'[a-zA-Z0-9._%+_]+@[a-zA-Z0-9.-]+\\.com'}"</value>
				
				
				
	bean的生命周期
		1、通过配置文件创建bean的实例
		2、为bean的属性设置值和对其他bean的引用
		3、将bean的实例传递给bean后置处理器的postProcessBeforeInitialization方法
		4、执行初始化方法
		5、将bean的实例传递给bean后置处理器的postProcessAfterInitialization方法
		6、bean可以使用了
		7、当容器关闭时，调用bean的销毁方法
		
		例子：
		<!-- 初始化方法：init-method，销毁方法：destroy-method -->
		<bean id="myBeanPostProcessor" class="com.spring.beanprocessor.MyBeanProcessor"></bean>
		<bean id="person_07" class="com.spring.beans.Person" p:name="大黄"
			p:age="6" p:cars-ref="car_01" init-method="init" destroy-method="destroy"></bean>
		
		
		
		
	工厂方法
		静态工厂方法：
		factory-method="getDateInstance"  ：使用的方法
		<constructor-arg value="2"></constructor-arg>   ：传进方法的参数值
		
		例子：
		<bean id="dateFormat" class="java.text.DateFormat" factory-method="getDateInstance">
			<constructor-arg value="2"></constructor-arg>
		</bean>
		
		
		实例工厂方法：
		factory-bean="simpleDateFormat"  ：参考的bean
		
		例子：
		<bean id="simpleDateFormat" class="java.text.SimpleDateFormat">
			<constructor-arg value="yyyy-MM-dd hh-mm-ss"></constructor-arg>
		</bean>
		<!-- parse()返回的数据类型为Date -->
		<bean id="date" factory-bean="simpleDateFormat" factory-method="parse">
			<constructor-arg value="2018-4-11 19-36-29"></constructor-arg>
		</bean>
		
	通过FactoryBean接口配置bean
		<bean id="factoryBean" class="com.spring.factory.FactoryBean"></bean>
		